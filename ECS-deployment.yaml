name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  

env:
  AWS_REGION: us-east-1  
  ECR_REPOSITORY: aws-project-1  
  ECS_CLUSTER: project-1-ecs-cluster  
  ECS_SERVICE: project-1-ecs-service  
  ECS_TASK_DEFINITION: project-1-task-definition 
  CONTAINER_NAME: aws-project-1

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets. }}
          aws-secret-access-key: ${{ secrets. }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECS Cluster (if not exists)
        run: |
          aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query "clusters[*].clusterName" --output text | grep -wq ${{ env.ECS_CLUSTER }} || \
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Ensure ECS Service Exists
        run: |
          SERVICE=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[*].serviceName" --output text)
          if [ "$SERVICE" != "${{ env.ECS_SERVICE }}" ]; then
            echo "Creating ECS Service..."
            aws ecs create-service --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.ECS_TASK_DEFINITION }} --desired-count 1 --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-xxxxxxxx],securityGroups=[sg-xxxxxxxx],assignPublicIp=ENABLED}"
          else
            echo "ECS Service already exists."
          fi

      - name: Download ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Update ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
